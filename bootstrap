#!/bin/bash
set -e
if [ $# -eq 0 ]; then
  install=false
else
  if [ "$1" = "install" ]; then
      install=true
  else
      echo "Invalid command, supported commands are: 'install'"
      exit 1
  fi
fi

if [[ "$PYTHON" =~ "python2" ]]; then
    echo "python2 is not supported." >&2
    exit 1
fi

PYTHON=${PYTHON:-"python3"}
VENV=${VENV:-"./virtualenv"}

case "$(uname -s)" in
Linux)
    case "$(lsb_release --id --short)" in
    Ubuntu|Debian|LinuxMint)
        deps=(qemu-utils python3-dev libssl-dev python3-pip python3-venv libev-dev libvirt-dev libffi-dev libyaml-dev)
        for package in ${deps[@]}; do
            if [ "$(dpkg --status -- $package|sed -n 's/^Status: //p')" != "install ok installed" ]; then
                # add a space after old values
                missing="${missing:+$missing }$package"
            fi
        done
        if [ -n "$missing" ]; then
            echo "$0: missing required packages:" 1>&2
            echo "$missing"
            if [ "$install" = true ]; then
                echo "Installing missing packages..."
                sudo apt-get -y install $missing
            else
                echo "Please install missing packages or run './bootstrap install' if you have sudo"
                echo "sudo apt-get -y install $missing"
                exit 1
            fi
        fi
        ;;
    RedHatEnterpriseWorkstation|RedHatEnterpriseServer|RedHatEnterprise|CentOS)
        deps=(python3-pip python3-devel mariadb-devel libev-devel libvirt-devel libffi-devel)
        for package in ${deps[@]}; do
          if [ "$(rpm -q $package)" == "package $package is not installed" ]; then
              missing="${missing:+$missing }$package"
          fi
        done
        if [ -n "$missing" ]; then
            echo "$0: missing required packages:" 1>&2
            echo "$missing"
            if [ "$install" = true ]; then
                echo "Installing missing packages..."
                sudo yum -y install $missing
            else
                echo "Please install missing packages or run './bootstrap install' if you have sudo"
                echo "sudo yum -y install $missing"
                exit 1
            fi
        fi
        ;;
    Fedora)
        deps=(python3-pip python3-devel libev-devel libvirt-devel libffi-devel)
        for package in ${deps[@]}; do
          if [ "$(rpm -q $package)" == "package $package is not installed" ]; then
              missing="${missing:+$missing }$package"
          fi
        done
        fedora_release=$(lsb_release -rs)
        package_manager=dnf
        if [ $fedora_release -lt 23 ]; then
            package_manager=yum
        fi
        if [ -n "$missing" ]; then
            echo "$0: missing required packages:" 1>&2
            echo "$missing"
            if [ "$install" = true ]; then
                echo "Installing missing packages..."
                sudo $package_manager -y install $missing
            else
                echo "Please install missing packages or run './bootstrap install' if you have sudo"
                echo "sudo $package_manager -y install $missing"
                exit 1
            fi
        fi
        ;;
    "openSUSE project"|"SUSE LINUX"|"openSUSE")
	deps=(python3-pip python3-devel python3 libev-devel libvirt-devel libffi-devel)
	for package in ${deps[@]}; do
            if [ "$(rpm -q $package)" == "package $package is not installed" ]; then
                if [ "$(rpm -q --whatprovides $package)" == "no package provides $package" ]; then
                    missing="${missing:+$missing }$package"
                fi
            fi
        done
        if [ -n "$missing" ]; then
            echo "$0: missing required packages, please install them:" 1>&2
            echo "sudo zypper install $missing"
            exit 1
        fi
        ;;
    *)
        echo "This script does not support your Linux distribution yet. Patches encouraged!"
        exit 1
        ;;
    esac
    ;;
Darwin)
    if ! brew --version &>/dev/null; then
        echo "You need Homebrew: http://brew.sh/"
        exit 1
    fi
    for keg in python libvirt libev libffi; do
        if brew list $keg >/dev/null 2>&1; then
            echo "Found $keg"
        else
            if [ "$install" = true ]; then
                brew install $keg
            else
                missing="${missing:+$missing }$keg"
                echo "Please install missing packages or run './bootstrap install':"
                echo "brew install $missing"
                exit 1
            fi
        fi
    done
    ;;
*)
    echo "This script does not support your OS yet. Patches encouraged!"
    exit 1
    ;;
esac

# If the venv was set to use system site-packages, fix that
if [ -d "$VENV" ]; then
    sed -i'' -e 's/\(include-system-site-packages\s*=\s*\)true/\1false/g' $VENV/pyvenv.cfg
fi

export LC_ALL=en_US.UTF-8

if [ -z "$NO_CLOBBER" ] || [ ! -e $VENV ]; then
    python3 -m venv $VENV
fi

# It is impossible to upgrade ansible from 2.9 to 2.10 via pip.
# See https://docs.ansible.com/ansible/devel/porting_guides/porting_guide_2.10.html#known-issues
if [ -f "$VENV/bin/ansible" ]; then
    ansible_version=$(pip list --format json | python3 -c "import sys; import json; print(list(filter(lambda i: i['name'] == 'ansible', json.loads(sys.stdin.read())))[0]['version'])" | grep ^2.9)
    if [ -n "$ansible_version" ]; then
        pip uninstall -y ansible
    fi
fi

# First, upgrade pip
$VENV/bin/pip install --upgrade pip

# By default, install teuthology in editable mode
$VENV/bin/pip install ${PIP_INSTALL_FLAGS:---editable '.[test]'}

# Check to make sure requirements are met
$VENV/bin/pip check
